package bean;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class BoardDAO {

	Connection con;
	PreparedStatement pstmt;
	ResultSet rs;

	public void getCon() {

		try {
			Context ctx = new InitialContext();
			Context envctx = (Context) ctx.lookup("java:comp/env");
			DataSource ds = (DataSource) envctx.lookup("jdbc/pool");
			con = ds.getConnection();
		} catch (Exception e) {
			e.getStackTrace();
		}
	}

	public void insertBoard(BoardBean boardbean) {
		getCon();

		int ref = 0;
		int re_step = 1;
		int re_level = 1;

		try {
			// 최신 글 찾아내기
			String rsql = "select max(ref) from board";
			pstmt = con.prepareStatement(rsql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				ref = rs.getInt(1) + 1;
			}
			String sql = "insert into board values (bo_seq.NEXTVAL,?,?,?,?,sysdate,?,?,?,0,?)";

			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, boardbean.getWriter());
			pstmt.setString(2, boardbean.getEmail());
			pstmt.setString(3, boardbean.getSubject());
			pstmt.setString(4, boardbean.getPassword());
			pstmt.setInt(5, ref);
			pstmt.setInt(6, re_step);
			pstmt.setInt(7, re_level);
			pstmt.setString(8, boardbean.getContent());
			rs = pstmt.executeQuery();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public int getAllCount() {
		getCon();

		int count = 0;
		try {
			String sql = "select count(*) from board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				count = rs.getInt(1);
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}

	public Vector<BoardBean> allBoard(int startRow, int endRow) {
		// 글쓰기 : 정보 입력 >>> BoardBean에 저장됨 (useBean)
		// >> useBean에 저장한 값들을 꺼내와서 테이블에 삽입
		Vector<BoardBean> v = new Vector<>();

		getCon();
		try {
			String sql = "select * from (select A.*, Rownum Rnum from(select * from board order by ref desc, re_level asc)A) where Rnum >= ? and Rnum <=?";

			pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, startRow);
			pstmt.setInt(2, endRow);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				// db에 저장된 글들을 자바빈에 저장
				BoardBean bean = new BoardBean();

				bean.setNum(rs.getInt(1));
				bean.setWriter(rs.getString(2));
				bean.setEmail(rs.getString(3));
				bean.setSubject(rs.getString(4));
				bean.setPassword(rs.getString(5));
				bean.setReg_date(rs.getDate(6).toString());// 객체를 문자열로
				bean.setRef(rs.getInt(7));
				bean.setRe_step(rs.getInt(8));
				bean.setRe_level(rs.getInt(9));
				bean.setReadcount(rs.getInt(10));
				bean.setContent(rs.getString(11));

				v.add(bean);
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return v;
	}

	public BoardBean oneBoard(int num) {

		BoardBean bean = new BoardBean();

		getCon();
		try {
			String readsql = "update board set readcount = readcount + 1 where num = ?";

			pstmt = con.prepareStatement(readsql);
			pstmt.setInt(1, num);

			rs = pstmt.executeQuery();

			String sql = "select * from board where num = ?";

			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, num);

			rs = pstmt.executeQuery();

			if (rs.next()) {
				bean.setNum(rs.getInt(1));
				bean.setWriter(rs.getString(2));
				bean.setEmail(rs.getString(3));
				bean.setSubject(rs.getString(4));
				bean.setPassword(rs.getString(5));
				bean.setReg_date(rs.getDate(6).toString());// 객체를 문자열로
				bean.setRef(rs.getInt(7));
				bean.setRe_step(rs.getInt(8));
				bean.setRe_level(rs.getInt(9));
				bean.setReadcount(rs.getInt(10));
				bean.setContent(rs.getString(11));
			}
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return bean;

	}
	
	public void rewriteBoard(BoardBean bean) {
		
		int ref = bean.getRef();
		int re_step = bean.getRe_step();
		int re_level = bean.getRe_level();
		
		getCon();
		
		try {
			String levelsql = "update board set re_level = re_level + 1 where ref = ? and re_level > ?";
			
			pstmt = con.prepareStatement(levelsql);
			pstmt.setInt(1, ref);
			pstmt.setInt(1, re_level);
			
		}catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	
}
