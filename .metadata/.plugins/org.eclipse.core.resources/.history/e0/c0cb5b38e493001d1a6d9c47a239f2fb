package gui;

import java.awt.Component;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

public class Lookup extends JFrame {
	private JPanel contentPane;

	private JScrollPane productScrolledPane1;
	private JScrollPane logScrolledPane;
	private JScrollPane userScrolledPane;
	private JTable productTable;
	private JTable userTable;
	private JTable logTable;

	/**
	 * Create the frame.
	 */
	public Lookup() {
		setBounds(100, 100, 1000, 660);
		setLocationRelativeTo(null);

		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);

		// 상품 테이블에 행 추가하기
		String productHeader[] = { "NO", "NAME", "PRICE", "CTG", "STOCK", "ADD" };
		Object[][] productInformation = { { "상품번호", "상품명", "가격", "카테고리", "재고", new JButton("추가") },
				{ "상품번호", "상품명", "가격", "카테고리", "재고", new JButton("추가") },
				{ "상품번호", "상품명", "가격", "카테고리", "재고", new JButton("추가") },
				{ "상품번호", "상품명", "가격", "카테고리", "재고", new JButton("추가") },
				{ "상품번호", "상품명", "가격", "카테고리", "재고", new JButton("추가") } };

		// 유저 테이블에 행 추가하기
		String userHeader[] = { "NO", "ID", "PW", "NAME", "BIRTH", "ADDR", "PHONE", "EMAIL" };
		String[][] userInformation = { { "회원번호", "아이디", "비밀번호", "이름", "생일", "주소", "핸드폰", "이메일" },
				{ "회원번호", "아이디", "비밀번호", "이름", "생일", "주소", "핸드폰", "이메일" },
				{ "회원번호", "아이디", "비밀번호", "이름", "생일", "주소", "핸드폰", "이메일" },
				{ "회원번호", "아이디", "비밀번호", "이름", "생일", "주소", "핸드폰", "이메일" },
				{ "회원번호", "아이디", "비밀번호", "이름", "생일", "주소", "핸드폰", "이메일" } };

		// 로그 테이블에 행 추가하기
		String logHeader[] = { "일자", "LOG" };
		String logInformation[][] = { { "0000/00/00", "000님이 회원가입 하셨습니다." }, { "0000/00/00", "상품이름이 추가되었습니다." },
				{ "0000/00/00", "000님이 회원탈퇴 하셨습니다." }, { "0000/00/00", "상품이름이 감소되었습니다." } };

		// 테이블 글자 정렬
		DefaultTableCellRenderer celAlignCenter = new DefaultTableCellRenderer();
		celAlignCenter.setHorizontalAlignment(JLabel.CENTER);
		contentPane.setLayout(null);

		// product테이블
		productTable = new JTable(new JTableModel());
		productTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		productScrolledPane1 = new JScrollPane(productTable);
		productTable.setFillsViewportHeight(true);	
		
		TableCellRenderer buttonRenderer = new JTableButtonRenderer();
		productTable.addMouseListener(new JTableButtonMouseListener(productTable));
		productTable.getColumn("ADD").setCellRenderer(buttonRenderer);
		
		productScrolledPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		productScrolledPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		productScrolledPane1.setBounds(5, 5, 480, 282);
		productScrolledPane1.setBorder(new LineBorder(new Color(0, 0, 0)));

		// 컬럼 사이즈 조절
		productTable.getColumnModel().getColumn(0).setMaxWidth(40);
		productTable.getColumnModel().getColumn(0).setMinWidth(50);
		productTable.getColumnModel().getColumn(0).setWidth(50);

		productTable.getColumnModel().getColumn(1).setMinWidth(350);
		productTable.getColumnModel().getColumn(1).setWidth(350);

		// product테이블 글자 정렬
		for (int i = 0; i < 6; i++) {
			productTable.getColumn(productHeader[i]).setCellRenderer(celAlignCenter);
		}
		getContentPane().add(productScrolledPane1);

		// customer테이블
		userTable = new JTable(userInformation, userHeader);
		userTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		userTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		userScrolledPane = new JScrollPane(userTable);
		userScrolledPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		userScrolledPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		userScrolledPane.setBounds(500, 5, 480, 282);
		userScrolledPane.setBorder(new LineBorder(new Color(0, 0, 0)));

		// 컬럼 사이즈 조절
		userTable.getColumnModel().getColumn(0).setMaxWidth(40);
		userTable.getColumnModel().getColumn(0).setMinWidth(40);
		userTable.getColumnModel().getColumn(0).setWidth(40);

		userTable.getColumnModel().getColumn(4).setMaxWidth(100);
		userTable.getColumnModel().getColumn(4).setMinWidth(100);
		userTable.getColumnModel().getColumn(4).setWidth(100);

		userTable.getColumnModel().getColumn(5).setMaxWidth(100);
		userTable.getColumnModel().getColumn(5).setMinWidth(100);
		userTable.getColumnModel().getColumn(5).setWidth(100);

		userTable.getColumnModel().getColumn(6).setMaxWidth(100);
		userTable.getColumnModel().getColumn(6).setMinWidth(100);
		userTable.getColumnModel().getColumn(6).setWidth(100);

		userTable.getColumnModel().getColumn(7).setMaxWidth(100);
		userTable.getColumnModel().getColumn(7).setMinWidth(100);
		userTable.getColumnModel().getColumn(7).setWidth(100);
		// customer테이블 글자 정렬
		for (int i = 0; i < 8; i++) {
			userTable.getColumn(userHeader[i]).setCellRenderer(celAlignCenter);
		}
		contentPane.add(userScrolledPane);

		// log테이블
		logTable = new JTable(logInformation, logHeader);
		logTable.setCellSelectionEnabled(true);
		logTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		logTable.getColumnModel().getColumn(0).setMaxWidth(80);
		logTable.getColumnModel().getColumn(0).setMinWidth(80);
		logTable.getColumnModel().getColumn(0).setWidth(80);

		logTable.getColumnModel().getColumn(1).setMaxWidth(900);
		logTable.getColumnModel().getColumn(1).setMinWidth(900);
		logTable.getColumnModel().getColumn(1).setWidth(900);

		// log테이블 글자 정렬
		logTable.getColumn("일자").setCellRenderer(celAlignCenter);

		logScrolledPane = new JScrollPane(logTable);
		logScrolledPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		logScrolledPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		logScrolledPane.setBounds(5, 330, 980, 291);
		logScrolledPane.setBorder(new LineBorder(new Color(0, 0, 0)));
		contentPane.add(logScrolledPane);

		JButton custLog = new JButton("회원로그조회");
		custLog.setFont(new Font("맑은 고딕", Font.PLAIN, 13));
		custLog.setBounds(291, 297, 119, 23);
		contentPane.add(custLog);

		JButton productLog = new JButton("상품로그조회");
		productLog.setFont(new Font("맑은 고딕", Font.PLAIN, 13));
		productLog.setBounds(153, 296, 119, 23);
		contentPane.add(productLog);

		JButton allLog = new JButton("전체로그조회");
		allLog.setFont(new Font("맑은 고딕", Font.PLAIN, 13));
		allLog.setBounds(15, 296, 119, 23);
		contentPane.add(allLog);
		// 조회프레임 닫을 경우 기본 홈 화면으로 돌아가기
		this.addWindowListener(new WindowListener() {
			@Override
			public void windowOpened(WindowEvent e) {
			}

			@Override
			public void windowClosing(WindowEvent e) {
				Home home = new Home();
				home.setVisible(true);
				dispose();
			}

			@Override
			public void windowClosed(WindowEvent e) {
			}

			@Override
			public void windowIconified(WindowEvent e) {
			}

			@Override
			public void windowDeiconified(WindowEvent e) {
			}

			@Override
			public void windowActivated(WindowEvent e) {
			}

			@Override
			public void windowDeactivated(WindowEvent e) {
			}
		});
	}

	public static class JTableModel extends AbstractTableModel {
		private static final long serialVersionUID = 1L;
		private static final String[] COLUMN_NAMES = new String[] { "NO", "NAME", "PRICE", "CTG", "STOCK", "ADD" };
		private static final Class<?>[] COLUMN_TYPES = new Class<?>[] { Integer.class, String.class, Integer.class,
				Integer.class, Integer.class, JButton.class };

		@Override
		public int getColumnCount() {
			return COLUMN_NAMES.length;
		}

		@Override
		public int getRowCount() {
			return 6;
		}

		@Override
		public String getColumnName(int columnIndex) {
			return COLUMN_NAMES[columnIndex];
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return COLUMN_TYPES[columnIndex];
		}

		@Override
		public Object getValueAt(final int rowIndex, final int columnIndex) {
			switch (columnIndex) {
			case 0:
				return rowIndex;
			case 1:
				return "상품 이름 " + rowIndex;
			case 2:
				return rowIndex;
			case 3:
				return rowIndex;
			case 4:
				return 100;
			case 5:
				final JButton button = new JButton(COLUMN_NAMES[columnIndex]);
				button.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
//						COLUMN_NAMES[4]
					}
				});
				return button;
			default:
				return "Error";
			}
		}
	}

	private static class JTableButtonRenderer implements TableCellRenderer {
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
				int row, int column) {
			JButton button = (JButton)value;
			if (isSelected) {
				button.setForeground(table.getSelectionForeground());
				button.setBackground(table.getSelectionBackground());
			} else {
				button.setForeground(table.getForeground());
				button.setBackground(UIManager.getColor("Button.background"));
			}
			return button;
		}
	}

	private static class JTableButtonMouseListener extends MouseAdapter {
		private final JTable table;

		public JTableButtonMouseListener(JTable table) {
			this.table = table;
		}

		public void mouseClicked(MouseEvent e) {
			int column = table.getColumnModel().getColumnIndexAtX(e.getX());
			int row = e.getY() / table.getRowHeight();

			if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0) {
				Object value = table.getValueAt(row, column);
				if (value instanceof JButton) {
					((JButton) value).doClick();
				}
			}
		}
	}
}